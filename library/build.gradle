group = GROUP_ID
version = VERSION

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion COMPILE_SDK_VERSION
    buildToolsVersion BUILD_TOOLS_VERSION
    defaultConfig {
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

configurations {
    lintChecks
}

dependencies {
    implementation "androidx.core:core:$ANDROIDX_LIBRARY_VERSION"
    implementation "androidx.fragment:fragment:$ANDROIDX_LIBRARY_VERSION"
    implementation "androidx.collection:collection:$ANDROIDX_LIBRARY_VERSION"

    testImplementation "junit:junit:$JUNIT_VERSION"
    testImplementation "org.mockito:mockito-core:$MOCKITO_VERSION"
    testImplementation "org.powermock:powermock-api-mockito:$POWERMOCK_VERSION"
    testImplementation "org.powermock:powermock-module-junit4:$POWERMOCK_VERSION"

    api project(path: ':annotation')
    lintChecks project(path: ':lint', configuration: 'lintChecks')
}

bintray {
    publications = ['MyPublication']
    user = bintrayUser
    key = bintrayKey
    dryRun = dryRun
    publish = true

    pkg {
        repo = REPO
        userOrg = USER
        name = ARTIFACT_ID_LIBRARY
        vcsUrl = VCS_URL
        licenses = LICENCES
        websiteUrl = WEBSITE
        version {
            name = VERSION
            desc = DESCRIPTION
        }
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            artifact sourcesJar
            artifact javadocJar
            artifact "$buildDir/outputs/aar/library-release.aar"
            groupId GROUP_ID
            artifactId ARTIFACT_ID_LIBRARY
            version VERSION

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                // Iterate over the compile dependencies, adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    if (it.group != null && it.name != null && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        // to change annotation module artifactId explicitly
                        // ref: https://github.com/dcendents/android-maven-gradle-plugin/issues/9#issuecomment-73550293
                        def artifactId = (it.group == GROUP_ID && it.name == "annotation") ? ARTIFACT_ID_ANNOTATION : it.name
                        dependencyNode.appendNode('artifactId', artifactId)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task copyLintJar(type: Copy) {
    from(configurations.lintChecks) {
        rename { 'lint.jar' }
    }
    into 'build/intermediates/lint/'
}

project.afterEvaluate {
    def compileLintTask = project.tasks.find { it.name == 'compileLint' }
    compileLintTask.dependsOn(copyLintJar)
}

// Android Library project: Artifactory Plugin adds 1 publication per Build Type
project.ext.publicationName = "release"
apply from: rootProject.file('gradle/gradle-artifactory-upload.gradle')
